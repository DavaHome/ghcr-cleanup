name: "ghcr.io Container Cleanup"
description: 'A GitHub Action that cleans up old ghcr.io Containers'
branding:
    icon: 'package'
    color: 'orange'
inputs:
    # Global (for all steps)
    packages_token:
        description: 'A github token with the read:packages, write:packages and delete:packages permissions'
        required: true
    package_name:
        description: 'Name of the package (e.g. for "ghcr.io/example/container" the packageName is "container")'
        required: true
    owner:
        description: 'The owner of the package (for regular users this value is always "user" and NOT your name, for organizations this value is "orgs/<Name of Org>")'
        required: true

    # Delete images
    keep_versions:
        description: 'The minimum amount of versions to keep'
        required: false
        default: 30
    minimum_days:
        description: 'The minimum age (in days) that an image has to be untouched'
        required: false
        default: 14
    skip_tags:
        description: 'A comma separated list of Tags that should be skipped'
        required: false
        default: 'latest,main'

    # Delete untagged images
    delete_untagged:
        descriptions: 'Delete all untagged containers (1/0)'
        required: false
        default: 0
    keep_untagged_versions:
        description: 'The minimum amount of untagged versions to keep'
        required: false
        default: 14

runs:
    using: composite
    steps:
        -   name: 'Delete untagged images from ghcr.io'
            uses: actions/github-script@v3
            with:
                github-token: '${{ inputs.packages_token }}'
                script: |
                    const shouldDeleteUntagged = (0 + "${{ inputs.delete_untagged }}") > 0;

                    if (!shouldDeleteUntagged) {
                        console.log("Delete of untagged images is disabled. Set 'delete_untagged':1 to enable it");
                    } else {
                        const keepVersions = 0 + "${{ inputs.keep_untagged_versions }}";

                        console.log("Checking package ${{ inputs.owner }}/${{ inputs.package_name }} for untagged versions");
                        console.log("Keeping (at least) " + keepVersions + " untagged versions");

                        const response = await github.request("GET /${{ inputs.owner }}/packages/container/${{ inputs.package_name }}/versions", {
                            per_page: 100
                        });

                        let deleteCount  = 0;
                        let versionCount = 0;
                        for (version of response.data) {
                            const hasTags = version.metadata.container.tags.length !== 0;
                            if (hasTags) {
                                continue;
                            } else if (++versionCount <= keepVersions) {
                                continue;
                            }

                            console.log("delete " + version.id + " (Created at: " + version.created_at + ")");
                            const deleteResponse = await github.request("DELETE /${{ inputs.owner }}/packages/container/${{ inputs.package_name }}/versions/" + version.id, {});
                            if (deleteResponse.status >= 200 && deleteResponse.status < 300) {
                                console.log("Successfully deleted");
                                deleteCount++;
                            }
                        }
                        console.log("Deleted " + deleteCount + " untagged images");
                    }
        -   name: 'Delete images from ghcr.io'
            uses: actions/github-script@v3
            with:
                github-token: '${{ inputs.packages_token }}'
                script: |
                    console.log("Deleting old versions from ${{ inputs.owner }}/${{ inputs.package_name }}");
                    console.log("Keeping (at least) ${{ inputs.keep_versions }} versions");
                    console.log("Will skip images that are older than ${{ inputs.minimum_days }} days");
                    console.log("Skipping images with tags ${{ inputs.skip_tags }}");

                    const skipTags   = "${{ inputs.skip_tags }}".split(',');
                    const minimumAge = new Date(new Date().setDate(new Date().getDate() - "${{ inputs.minimum_days }}"));
                    const response   = await github.request("GET /${{ inputs.owner }}/packages/container/${{ inputs.package_name }}/versions", {
                        per_page: 0 + "${{ inputs.keep_versions }}",
                        page:     2
                    });

                    let deleteCount = 0;
                    for (version of response.data) {
                        const dateUpdated = new Date(version.updated_at);

                        let message = version.id + " (Last Update: " + version.updated_at + ")";
                        message += " (" + ((version.metadata.container.tags.length > 0) ? "Tags: " + version.metadata.container.tags.join(', ') : "Untagged") + ")";

                        // image is too young
                        if (dateUpdated >= minimumAge) {
                            console.log("Skipping " + message + ": too young");
                            continue;
                        }

                        // image has tags (that should be skipped)
                        if (skipTags.length > 0 && version.metadata.container.tags.length > 0) {
                            if (version.metadata.container.tags.some(item => skipTags.includes(item))) {
                                console.log("Skipping " + message + ": contains a skip tag");
                                continue;
                            }
                        }

                        console.log("Deleting " + message);
                        const deleteResponse = await github.request("DELETE /${{ inputs.owner }}/packages/container/${{ inputs.package_name }}/versions/" + version.id, {});
                        if (deleteResponse.status >= 200 && deleteResponse.status < 300) {
                            console.log("Successfully deleted");
                            deleteCount++;
                        }
                    }
                    console.log("Deleted " + deleteCount + " images");
